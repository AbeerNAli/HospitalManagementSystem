{"version":3,"sources":["components/SummaryTable.js","components/Mapcomp.js","components/Urbanselectioncomp.js","components/Navcomp.js","components/OffCanvascomp.js","components/Loadingcomponent.jsx","App.js","reportWebVitals.js","index.js"],"names":["Table","LONGITUDE_RANGE","LATITUDE_RANGE","raw_view_state","longitude","latitude","zoom","pitch","bearing","transitionDuration","transitionInterpolator","FlyToInterpolator","minZoom","maxZoom","MapComponent","memo","toggleOffCanvasFunc","cir_data","setHospital","useState","hoverInfo","setHoverInfo","view_state","set_view_state","polygon_data","set_polygon_data","hoveredObject","clickedObject","setClickedObject","useEffect","index","newView","Object","assign","undefined","parseFloat","HospitalLongitude","HospitalLatitude","viewState","controller","onViewStateChange","Math","min","max","id","data","opacity","stroked","filled","radiusScale","radiusMinPixels","radiusMaxPixels","lineWidthMinPixels","getRadius","d","all_beds","rad","console","log","retrad","getFillColor","NumOfAllBed","ocup_bed","NumAvailable","step","getcolor","pickable","getLineColor","getPosition","getCord","onHover","onClick","mapboxApiAccessToken","style","display","float","margin","padding","position","justifyContent","width","Button","Urbanselectioncomp","Navcomp","Navbar","collapseOnSelect","expand","variant","backgroundColor","Container","Toggle","Collapse","Nav","className","Link","eventKey","href","DomainName","color","OffCanvascomp","showCanvas","hospital_info","setShow","Offcanvas","show","onHide","placement","scroll","backdrop","Header","paddingTop","paddingBottom","Title","marginTop","paddingLeft","paddingRight","Body","textAlign","marginLeft","JSON","stringify","Name","Phone","Address","NumOfAvailableBed","Loadingcomponent","App","hospitalData","setHospitalData","setShowCanvas","hospital","a","fetch","then","response","json","i","length","getdata","Row","Col","s","md","Mapcomp","entry","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","rel","integrity","crossorigin","document","getElementById"],"mappings":"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","file":"static/js/main.9728aae1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../css/Table.css\";\r\nfunction Table({ govs }) {\r\n  return (\r\n    <div className=\"table\">\r\n      <tr>\r\n        <th>City</th>\r\n        <th>Agriculture</th>\r\n        <th>Aqua</th>\r\n        <th>Sand</th>\r\n        <th>Urban</th>\r\n        <th>Roads</th>\r\n        <th>No data</th>\r\n      </tr>\r\n\r\n      {govs.map(({ gov, agri }) => (\r\n        <tr>\r\n          <td>{gov}</td>\r\n          <td>\r\n            <strong>12%</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React, { useEffect, useState, memo } from \"react\";\r\nimport DeckGL from \"@deck.gl/react\";\r\nimport {ScatterplotLayer } from \"@deck.gl/layers\";\r\nimport { StaticMap, FlyToInterpolator } from \"react-map-gl\";\r\nimport { Container, Row, Col, Button } from \"react-bootstrap\";\r\nimport { words } from \"../helpers/lang\";\r\n\r\n\r\n// Viewport settings\r\n\r\nconst MAPBOX_ACCESS_TOKEN =\r\n  \"pk.eyJ1IjoiZG9uem9tYTA5IiwiYSI6ImNrcno0djVqNjAwMGEyd3BjanVuY2hqMGIifQ.sOkp8Uufulj_dbEEpHrh3w\";\r\n\r\nconst DomainName = \"http://55b7-156-222-41-246.ngrok.io\"\r\n// const transitionInterpolator = new Linear(['bearing']);\r\nconst LONGITUDE_RANGE = [24.0 , 36.0]\r\nconst LATITUDE_RANGE = [22.0,32.0]\r\nconst raw_view_state = {\r\n    longitude: 31.2 ,\r\n    latitude: 27.8025,\r\n    zoom: 6,\r\n    pitch: 10,\r\n    bearing: 0,\r\n    transitionDuration: 900,\r\n    transitionInterpolator: new FlyToInterpolator(20),\r\n    minZoom : 6,\r\n    maxZoom : 18\r\n}\r\n\r\n// DeckGL react component\r\nconst MapComponent = memo(\r\n  ({ toggleOffCanvasFunc , cir_data , setHospital}) => {\r\n    const [hoverInfo , setHoverInfo] = useState({})\r\n    const [view_state , set_view_state] = useState(raw_view_state) \r\n    const [polygon_data , set_polygon_data] = useState(cir_data)\r\n    const [hoveredObject , setHoveredObject] = useState(-1)\r\n    const [clickedObject,setClickedObject] = useState({})\r\n\r\n  \r\n\r\n    useEffect(()=>{\r\n      set_polygon_data(cir_data)\r\n    } , [cir_data])\r\n    useEffect(()=>{\r\n      if(hoverInfo.index != -1){\r\n          const index = hoverInfo.index\r\n          const newData = [...polygon_data]\r\n          if(newData[index] != undefined){\r\n              if(index != hoveredObject && hoveredObject != -1){\r\n                  // newData[hoveredObject].lineWeight = 1\r\n                  // newData[hoveredObject].color =  [240, 240, 240,  20]\r\n              }\r\n              // newData[index].lineWeight = 10\r\n              // newData[index].color = [100,40,40,15] \r\n              // setHoveredObject(index)\r\n              // set_polygon_data(newData)   \r\n          } \r\n      }else{\r\n          const newData = [...polygon_data]\r\n          if(newData[hoveredObject] != undefined){\r\n              // newData[hoveredObject].lineWeight = 1\r\n              // newData[hoveredObject].color = [240, 240, 240, 20]\r\n              // set_polygon_data(newData)\r\n          }\r\n      }\r\n  } , [hoverInfo])\r\n    useEffect(()=>{\r\n        const index = clickedObject.index\r\n        const newView =  Object.assign({}, raw_view_state);\r\n        if(polygon_data[index] != undefined){\r\n            setHospital(polygon_data[index])  \r\n            newView.longitude = parseFloat(polygon_data[index].HospitalLongitude)\r\n            newView.latitude = parseFloat(polygon_data[index].HospitalLatitude)\r\n            newView.zoom = 12.5\r\n            set_view_state(newView)\r\n            \r\n        }\r\n    } , [clickedObject])\r\n    const getCord = (d)=>{\r\n      const cord = [parseFloat(d[\"HospitalLongitude\"]),parseFloat(d[\"HospitalLatitude\"])];\r\n      return cord \r\n    }\r\n    const getcolor = (d)=>{\r\n        const all_beds = d.NumOfAllBed;\r\n        const ocup_bed = all_beds - d.NumAvailable\r\n        const step = 255/all_beds;\r\n        const color = [step * ocup_bed , 255-(step * ocup_bed),0]\r\n        return color\r\n    }\r\n    const retrad = (d)=>{\r\n      const all_beds = d['NumOfAllBed'];\r\n\r\n      const ocup_bed = all_beds - d['NumAvailable'];\r\n      const step = 1500/all_beds;\r\n      let rad = (step * ocup_bed); \r\n      console.log(rad)\r\n      if( rad < 700){\r\n          rad = 700;\r\n      }\r\n      return rad;\r\n        \r\n    }\r\n    return (\r\n      <DeckGL\r\n      viewState={view_state}\r\n        controller={true}\r\n        onViewStateChange = {({viewState}) =>{\r\n            viewState.longitude = Math.min(LONGITUDE_RANGE[1], Math.max(LONGITUDE_RANGE[0], viewState.longitude));\r\n            viewState.latitude = Math.min(LATITUDE_RANGE[1], Math.max(LATITUDE_RANGE[0], viewState.latitude));\r\n            set_view_state(viewState)\r\n        }}\r\n        >\r\n\r\n        <ScatterplotLayer\r\n                id = \"scatterplot-laye\"  \r\n                data = {polygon_data}\r\n                opacity = {0.4}\r\n                stroked = {true}\r\n                filled =  {true}\r\n                radiusScale = {6}\r\n                radiusMinPixels = {1}\r\n                radiusMaxPixels = {50}\r\n                lineWidthMinPixels = {1}\r\n                getRadius = {(d) => retrad(d)}\r\n                getFillColor=  {(d) => getcolor(d)}\r\n                pickable =  {true}\r\n                getLineColor = {[0,0,0]}\r\n                getPosition  =  {d => getCord(d)}\r\n                onHover = {d => setHoverInfo(d)}\r\n                onClick = {d => setClickedObject(d)}\r\n                >\r\n          </ScatterplotLayer>\r\n\r\n        <StaticMap mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN}></StaticMap>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            float: \"left\",\r\n            margin: \"1rem\",\r\n            padding: \"0\",\r\n            position: \"static\",\r\n            justifyContent: \"space-around\",\r\n            width: \"10%\",\r\n          }}\r\n        >\r\n          <Button onClick={() => toggleOffCanvasFunc()}>\r\n            Toggle\r\n          </Button>\r\n        </div>\r\n      </DeckGL>\r\n    );\r\n  }\r\n);\r\n\r\nexport default MapComponent;\r\n","import React from \"react\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\n\r\nfunction Urbanselectioncomp() {\r\n  const urbans = [\r\n    { type: \"Agriculture\", color: \"green \" },\r\n    { type: \"Aqua\", color: \"indigo\" },\r\n    { type: \"Sand\", color: \"#ffbf00\" },\r\n    { type: \"Urban\", color: \"#808080\" },\r\n    { type: \"Roads\", color: \"#404040\" },\r\n    { type: \"Unknown\", color: \"white\" },\r\n  ];\r\n  return (\r\n    <Dropdown>\r\n      <Dropdown.Toggle variant=\"Success\" id=\"dropdown-basic\">\r\n        Urban\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu style={{ overflowY: \"scroll\", maxHeight: \"300px\" }}>\r\n        {urbans.map(({ type, color }) => {\r\n          return (\r\n            <Dropdown.Item\r\n              style={{ justifyContent: \"space-between\" }}\r\n              href={\"#\"}\r\n            >\r\n              {type}\r\n            </Dropdown.Item>\r\n          );\r\n        })}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  );\r\n}\r\n\r\nexport default Urbanselectioncomp;\r\n","import React, { useState } from \"react\";\r\nimport { Navbar, Container, Nav, NavDropdown } from \"react-bootstrap\";\r\nimport { urls } from \"../helpers/urls.js\";\r\nimport { words } from \"../helpers/lang\";\r\n\r\nconst DomainName = \"http://localhost:62277\"\r\n\r\nfunction Navcomp() {\r\n  return (\r\n    <Navbar collapseOnSelect expand=\"lg\" variant=\"light\" style = {{\r\n      backgroundColor : \"rgb(17, 42, 71)\"\r\n    }}>\r\n      <Container>\r\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n          <Nav className=\"me-auto\"></Nav>\r\n          <Nav>\r\n            <Nav.Link eventKey={2} href={DomainName + '/User/Homepage'}  style = {{\r\n              color : \"white\"\r\n            }}>\r\n              Dashboard\r\n            </Nav.Link>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Container>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default Navcomp;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Offcanvas,\r\n  Button,\r\n  Dropdown,\r\n  Row,\r\n  Col,\r\n  Image,\r\n  Alert,\r\n  Figure,\r\n} from \"react-bootstrap\";\r\n// import logo from \"../helpers/files/abosombol.png\";\r\nimport Piechartcomp from \"./Piechartcomp\";\r\nimport Govdropdowncomp from \"./GovDropDownComp\";\r\nimport Datecomp from \"./Datecomp\";\r\nimport Urbandropdowncomp from \"./Urbanselectioncomp\";\r\nimport Navcomp from \"./Navcomp\";\r\nimport { words, langs } from \"../helpers/lang\";\r\nimport { govs, dates, cities } from \"../helpers/dummy\";\r\nimport Resourcescomp from \"./Resourcescomp\";\r\nimport { urls } from \"../helpers/urls\";\r\n\r\n\r\nfunction OffCanvascomp({\r\n  showCanvas,\r\n  hospital_info\r\n}) {\r\n  const [show, setShow] = useState(true);\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  return (\r\n    <>\r\n      {/* <Button variant=\"primary\" onClick={handleShow} className=\"me-2\"></Button> */}\r\n      <Offcanvas\r\n        show={showCanvas}\r\n        onHide={handleClose}\r\n        placement={\"end\"}\r\n        scroll={true}\r\n        backdrop={false}\r\n        style={{\r\n          backgroundColor: \"rgba(17, 42, 71, 0.85)\",\r\n          color: \"black\",\r\n        }}\r\n      >\r\n        <Navcomp/>\r\n        <Offcanvas.Header\r\n          /* closeButton */\r\n          style={{ paddingTop: \"0\", paddingBottom: \"2px\" }}\r\n        >\r\n          <Offcanvas.Title\r\n            style={{ display: \"flex\", color: \"white\", position: \"relative\", marginTop : \"1rem\"}}\r\n          >\r\n            <strong>Egyptian Hospitals</strong>\r\n          </Offcanvas.Title>\r\n        </Offcanvas.Header>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            marginTop: \"1%\",\r\n            width: \"80%\",\r\n            paddingLeft: \"4%\",\r\n            paddingRight: \"10%\",\r\n            justifyContent: \"space-between\",\r\n          }}\r\n        >\r\n          {/* <span style={{ display: \"column\" }}>\r\n            <Govdropdowncomp\r\n              lang={lang}\r\n              govs={govs}\r\n              fetchGovSelection={fetchGovSelection}\r\n              selectedGovernorate={selectedGovernorate}\r\n              fetchAllAggregatedResources={fetchAllAggregatedResources}\r\n            />\r\n          </span> */}\r\n        </div>\r\n\r\n        <Offcanvas.Body>\r\n\r\n          {/* you might add this if you want as a feature */}\r\n          {/* <div style={{ marginBottom: \"60%\" }}>\r\n            <Piechartcomp lang={lang} resources={resources} />\r\n          </div> */}\r\n\r\n          <div\r\n            style={{\r\n              textAlign: \"center\",\r\n            }}\r\n          >\r\n            <div  className = \"canvs_container\" style={{ marginTop: \"2rem\"  ,color : \"white\" , textAlign : 'left' , marginLeft :\"1rem\"}}>\r\n\r\n              {JSON.stringify(hospital_info) !== JSON.stringify({}) &&\r\n                <div>\r\n                    <h1 className = \"canvs_header\">{hospital_info.Name}</h1>\r\n                    <p className = \"item tel\">telephone number: {hospital_info.Phone}</p>\r\n                    <p className = \"item address\">address:   {hospital_info.Address}</p>\r\n                    <div className=\"hospital_Data\">\r\n                        <p>Number Of Beds : {hospital_info.NumOfAllBed}</p>\r\n                        <p>Available Beds : {hospital_info.NumOfAvailableBed}</p>\r\n                    </div>\r\n                </div>\r\n              }\r\n              </div>\r\n          </div>\r\n        </Offcanvas.Body>\r\n\r\n      </Offcanvas>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default OffCanvascomp;\r\n","import React from \"react\";\r\nimport { Spinner } from \"react-bootstrap\";\r\nfunction Loadingcomponent() {\r\n  return (\r\n    <div\r\n      style={{\r\n        alignItems: \"center\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        position: \"absolute\",\r\n      }}\r\n    >\r\n      <Spinner animation=\"border\" variant=\"danger\" size=\"lg\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loadingcomponent;\r\n","import \"./css/App.css\";\r\nimport \"./css/Table.css\";\r\n/* import Navcomp from \"./components/Navcomp\"; */\r\n\r\nimport SummaryTable from \"./components/SummaryTable\";\r\nimport Mapcomp from \"./components/Mapcomp\";\r\n/* import { govs, dates, cities } from \"./helpers/dummy\"; */\r\nimport { Container, Row, Col, Dropdown } from \"react-bootstrap\";\r\nimport OffCanvascomp from \"./components/OffCanvascomp\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Loadingcomponent from \"./components/Loadingcomponent\";\r\nimport { urls } from \"./helpers/urls\";\r\n\r\nconst cir_data = [{\r\n  name : \"Ain Shams Specialized Hospital\",\r\n  num: 2000,\r\n  address: \"Abbasia, Cairo\",\r\n  tel :  \"(02) 2402-4111\",\r\n  cor : [ 31.287724432353258, 30.07823170878983]\r\n\r\n},\r\n{\r\n  name : \"Anglo American Hospital\",\r\n  num: 1200,\r\n  address: \"Zamalek, Cairo \",\r\n  tel :  \"(02) 2735-6162\",\r\n  cor : [ 31.22161358855352 , 30.04644817166295]\r\n},\r\n{\r\n  name : \"Damascus Hospital\",\r\n  num: 500,\r\n  address: \"Dokki, Giza\",\r\n  tel :  \"(02) 3347-0194/208/198\",\r\n  cor : [ 31.192615970425862, 30.055401724755153]\r\n},\r\n{\r\n  name : \"Alex-Sydeny-Kiel (ASK) Hospital\",\r\n  num: 300,\r\n  address: \"Obsterics and Gynecology, Maternal and Infant Care, and Childbirth\",\r\n  tel :  \"546-0130/944/128/941/943/1\",\r\n  cor : [ 29.950896953264635 , 31.23109178475124]\r\n}\r\n]\r\n\r\nconst DomainName = \"http://localhost:59423\"\r\n\r\nfunction App() {\r\n  //@TODO language config\r\n\r\n  const [hospitalData,setHospitalData] = useState([{}])\r\n  const [showCanvas, setShowCanvas] = useState(true); //switches the canvas on/off\r\n  const [hospital,setHospital] = useState({})\r\n\r\n  \r\n  ///----- Functions -----///\r\n  // fetches the selection of the governorate dropdown\r\n  function toggleOffCanvas() {\r\n    setShowCanvas(!showCanvas);\r\n  }\r\n\r\n  const updateCurrentHospital = (entry)=>{\r\n    const getdata = async () =>{\r\n      await fetch(DomainName + \"/api/admin/\" + entry[\"$id\"])\r\n      .then((response) => response.json())\r\n      .then((data) =>{\r\n        setHospital(data)\r\n      })\r\n    }\r\n    getdata()\r\n  }\r\n  \r\n  useEffect(()=>{\r\n    const getdata = async () =>{\r\n      await fetch(DomainName + \"/api/admin\")\r\n      .then((response) => response.json())\r\n      .then((data) =>{\r\n        for (let i  = 1; i< data.length + 1; i++){\r\n          fetch(DomainName + \"/api/admin/\" + i)\r\n          .then((response) => response.json())\r\n          .then((response) => {\r\n            data[i-1]['NumOfAvailableBed'] = 0\r\n            data[i-1]['NumOfAvailableBed'] = response.NumOfAvailableBed\r\n          })\r\n        } \r\n       \r\n        setHospitalData(data);\r\n      })\r\n    }\r\n    getdata()\r\n   \r\n  } , [])\r\n\r\n  return (\r\n    <div>\r\n      <header>\r\n        {/* Navbar [drop down to select gov && dropdown to select region && dropdown to select date*/}\r\n        {/* <Navcomp style={{ position: \"absolute\" }} /> */}\r\n      </header>\r\n      <body>\r\n        {/* Grid */}\r\n\r\n        <div\r\n          style={{\r\n            margin: \"1rem 0\",\r\n            justifyContent: \"space-between\",\r\n          }}\r\n        >\r\n          <Row>\r\n            <Col s={12} md={7}>\r\n              <Mapcomp\r\n                cir_data = {hospitalData}\r\n                toggleOffCanvasFunc = {toggleOffCanvas}\r\n                setHospital = {updateCurrentHospital}\r\n              />\r\n            </Col>\r\n            <Col s={12} md={5}>\r\n              <OffCanvascomp\r\n                showCanvas={showCanvas}\r\n                hospital_info = {hospital}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </body>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <link\r\n      rel=\"stylesheet\"\r\n      href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\"\r\n      integrity=\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\"\r\n      crossorigin=\"anonymous\"\r\n    />\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}